<templateSet group="user">
  <template name="a-change-detection-on-push" value="changeDetection: ChangeDetectionStrategy.OnPush" description="Angular-enable-onpush-change-detection" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JSX_HTML" value="false" />
      <option name="JS_CLASS" value="false" />
      <option name="JS_EXPRESSION" value="false" />
      <option name="JS_STATEMENT" value="false" />
      <option name="JS_TOP_LEVEL_STATEMENT" value="false" />
      <option name="TS_CLASS" value="false" />
      <option name="TS_EXPRESSION" value="false" />
      <option name="TS_STATEMENT" value="false" />
      <option name="TS_TOP_LEVEL_STATEMENT" value="false" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="a-module-feature-routing" value="const externalModules = [];&#10;const internalUIModules = [];&#10;const internalModules = [];&#10;const components = [$name$ListComponent]&#10;&#10;@NgModule({&#10;  declarations: [&#10;    ...components&#10;  ],&#10;  imports: [&#10;    SharedModule,&#10;    $name$RoutingModule,&#10;&#10;    ...internalModules,&#10;    ...internalUIModules,&#10;    ...externalModules&#10;  ],&#10;  providers: []&#10;})&#10;export class $name$sModule {&#10;}" description="angular feature module with routing" toReformat="true" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
      <option name="JS_TOP_LEVEL_STATEMENT" value="true" />
      <option name="TS_STATEMENT" value="true" />
      <option name="TS_TOP_LEVEL_STATEMENT" value="true" />
    </context>
  </template>
  <template name="a-module-feature" value="const externalModules = [];&#10;const internalUIModules = [];&#10;const internalModules = [];&#10;const components = [$name$Component]&#10;&#10;@NgModule({&#10;  declarations: [&#10;    ...components&#10;  ],&#10;  imports: [&#10;    SharedModule,&#10;&#10;    ...internalModules,&#10;    ...internalUIModules,&#10;    ...externalModules&#10;  ],&#10;  exports: [&#10;    ...components&#10;  ],&#10;  providers: []&#10;})&#10;export class $name$Module {&#10;}" description="angular feature module" toReformat="true" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
      <option name="JS_TOP_LEVEL_STATEMENT" value="true" />
      <option name="TS_STATEMENT" value="true" />
      <option name="TS_TOP_LEVEL_STATEMENT" value="true" />
    </context>
  </template>
  <template name="a-routing-import-lazy" value="{&#10;    path: $featureName$MainRoute,&#10;    loadChildren: () =&gt;&#10;      import('./$filePath$.module').then((f) =&gt; f.$modulePrefix$Module)&#10;  }" description="import lazy loaded feature" toReformat="true" toShortenFQNames="true">
    <variable name="featureName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="filePath" expression="lowercaseAndDash(featureName)" defaultValue="" alwaysStopAt="true" />
    <variable name="modulePrefix" expression="capitalize(featureName)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_EXPRESSION" value="true" />
      <option name="TS_EXPRESSION" value="true" />
    </context>
  </template>
  <template name="a-entity-active-map-list-view" value="map($parameter$: $entityName$): ListViewItem {&#10;    return {&#10;      id: $parameter$.id,&#10;      title: $parameter$.name,&#10;      subTitle: 'სტატუსი: ' + ($parameter$.active ? 'აქტიური' : 'არააქტიური'),&#10;      active: $parameter$.active,&#10;      height: '60px',&#10;      selectable: $parameter$.active&#10;    };&#10;  }" description="generate map frunction from entity to listview" toReformat="true" toShortenFQNames="true">
    <variable name="entityName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="parameter" expression="camelCase(entityName)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_CLASS" value="true" />
      <option name="TS_CLASS" value="true" />
    </context>
  </template>
  <template name="a-html-title" value="&lt;div class=&quot;container margins flex align-center&quot;&gt;&#10;  &lt;div class=&quot;h3&quot;&gt;$name$&#10;  &lt;/div&gt;&#10;&lt;/div&gt;" description="generate title" toReformat="true" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="true" />
    </context>
  </template>
  <template name="a-inject-change-detection-ref" value="private changeDetectionRef: ChangeDetectorRef" description="inject change detection ref" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JSX_HTML" value="false" />
      <option name="JS_CLASS" value="false" />
      <option name="JS_EXPRESSION" value="false" />
      <option name="JS_STATEMENT" value="false" />
      <option name="JS_TOP_LEVEL_STATEMENT" value="false" />
      <option name="TS_CLASS" value="false" />
      <option name="TS_EXPRESSION" value="false" />
      <option name="TS_STATEMENT" value="false" />
      <option name="TS_TOP_LEVEL_STATEMENT" value="false" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="a-html-subtitle" value="&lt;div class=&quot;container margins flex align-center&quot;&gt;&#10;  &lt;div class=&quot;h4&quot;&gt;$name$&#10;  &lt;/div&gt;&#10;&lt;/div&gt;" description="generate subtitle" toReformat="true" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="true" />
    </context>
  </template>
  <template name="a-inject-data-service" value="@Inject(DataBaseService) protected dataService: DataBaseGenericService&lt;$EntityName$&gt;" description="Inject dataService" toReformat="true" toShortenFQNames="true">
    <variable name="EntityName" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JSX_HTML" value="false" />
      <option name="JS_CLASS" value="false" />
      <option name="JS_EXPRESSION" value="false" />
      <option name="JS_STATEMENT" value="false" />
      <option name="JS_TOP_LEVEL_STATEMENT" value="false" />
      <option name="TS_CLASS" value="false" />
      <option name="TS_EXPRESSION" value="false" />
      <option name="TS_STATEMENT" value="false" />
      <option name="TS_TOP_LEVEL_STATEMENT" value="false" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="a-service-mapper" value="import { Injectable } from '@angular/core';&#10;import { ListViewItem } from '@libs/components';&#10;&#10;import { DomainToListViewMapperService } from '@admin/shared';&#10;&#10;import { $Name$ } from '../entity/$dashName$';&#10;&#10;@Injectable()&#10;export class $Name$MapperService extends DomainToListViewMapperService&lt;$Name$&gt; {&#10;  map($camelCaseName$: $Name$): ListViewItem {&#10;    return { ...super.map($camelCaseName$), selectable: $camelCaseName$.isActive, subTitle: '' };&#10;  }&#10;}" description="add mapper service" toReformat="true" toShortenFQNames="true">
    <variable name="Name" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="dashName" expression="lowercaseAndDash(Name)" defaultValue="" alwaysStopAt="false" />
    <variable name="camelCaseName" expression="camelCase(Name)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JS_STATEMENT" value="true" />
      <option name="JS_TOP_LEVEL_STATEMENT" value="true" />
      <option name="TS_STATEMENT" value="true" />
      <option name="TS_TOP_LEVEL_STATEMENT" value="true" />
    </context>
  </template>
  <template name="a-routing-module-list" value="import { NgModule } from '@angular/core';&#10;import { Routes, RouterModule } from '@angular/router';&#10;&#10;import { $NAME$ListComponent } from './list/$dashlowerNAME$-list.component';&#10;&#10;const routes: Routes = [&#10;  {&#10;    path: '',&#10;    pathMatch: 'full',&#10;    component: $NAME$ListComponent&#10;  }&#10;];&#10;&#10;@NgModule({&#10;  imports: [RouterModule.forChild(routes)],&#10;  exports: [RouterModule]&#10;})&#10;export class $NAME$RoutingModule { }" description="create routing module for list" toReformat="true" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="dashlowerNAME" expression="lowercaseAndDash(NAME)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JS_STATEMENT" value="true" />
      <option name="JS_TOP_LEVEL_STATEMENT" value="true" />
      <option name="TS_STATEMENT" value="true" />
      <option name="TS_TOP_LEVEL_STATEMENT" value="true" />
    </context>
  </template>
  <template name="a-component-list" value="import { AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';&#10;&#10;import { ListViewItem } from '@libs/components';&#10;import { AnimationsService } from '@libs/animations';&#10;import { OnPageSearchService } from '@libs/layout';&#10;&#10;import { Component$Type$ } from '@admin/shared';&#10;&#10;import { $Name$ } from '../entity/$dashLowerName$';&#10;import { $Name$Facade } from '../services/$dashLowerName$-facade.service';&#10;import { $Name$MapperService } from '../services/$dashLowerName$-mapper.service';&#10;&#10;@Component({&#10;  selector: 'sub-$dashLowerName$-list',&#10;  templateUrl: './$dashLowerName$-list.component.html',&#10;  styleUrls: ['./$dashLowerName$-list.component.scss'],&#10;  changeDetection: ChangeDetectionStrategy.OnPush&#10;})&#10;export class $Name$ListComponent extends Component$Type$&lt;$Name$, ListViewItem&gt; implements OnInit, AfterViewInit, OnDestroy {&#10;  constructor(protected facade: $Name$Facade,&#10;              protected mapper: $Name$MapperService,&#10;              protected animationsService: AnimationsService,&#10;              protected onPageSearchService: OnPageSearchService,&#10;              protected changeDetectionRef: ChangeDetectorRef) {&#10;    super(facade, mapper, animationsService, onPageSearchService, changeDetectionRef);&#10;  }&#10;&#10;}" description="add component list (types: Queryable, Activateable, Selectable, Crudable)" toReformat="true" toShortenFQNames="true">
    <variable name="Name" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="dashLowerName" expression="lowercaseAndDash(Name)" defaultValue="" alwaysStopAt="false" />
    <variable name="Type" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
      <option name="JS_TOP_LEVEL_STATEMENT" value="true" />
      <option name="TS_STATEMENT" value="true" />
      <option name="TS_TOP_LEVEL_STATEMENT" value="true" />
    </context>
  </template>
  <template name="a-module-feature-list" value="const externalModules = [];&#10;const internalUIModules = [];&#10;const internalModules = [];&#10;const components = [$name$ListComponent]&#10;&#10;@NgModule({&#10;  declarations: [&#10;    ...components&#10;  ],&#10;  imports: [&#10;    SharedModule,&#10;    $name$RoutingModule,&#10;&#10;    ...internalModules,&#10;    ...internalUIModules,&#10;    ...externalModules&#10;  ],&#10;  providers: [$name$sFacade, $name$MapperService, DataServiceProviderApiIsNotAvailableYet]&#10;})&#10;export class $name$sModule {&#10;}" description="angular feature module with routing" toReformat="true" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
      <option name="JS_TOP_LEVEL_STATEMENT" value="true" />
      <option name="TS_STATEMENT" value="true" />
      <option name="TS_TOP_LEVEL_STATEMENT" value="true" />
    </context>
  </template>
  <template name="a-service-facade" value="import { Inject, Injectable } from '@angular/core';&#10;&#10;import { DataBaseService, Facade$Type$ } from '@admin/shared';&#10;import { DataBaseGenericService } from '../../../../shared';&#10;&#10;import { $Name$ } from '../entity/$dashLowerName$';&#10;&#10;&#10;@Injectable()&#10;export class $Name$Facade extends Facade$Type$&lt;$Name$&gt; {&#10;  constructor(@Inject(DataBaseService) protected dataService: DataBaseGenericService&lt;$Name$&gt;) {&#10;    super(dataService);&#10;    super.updateFilterFields(&#10;      { name: 'id', searchType: 'eqNumber' },&#10;      { name: 'nameGeo', searchType: 'contains' },&#10;      { name: 'nameEng', searchType: 'contains' }&#10;    );&#10;    super.updatePath($Name$);&#10;    super.completeInit();&#10;  }&#10;}" description="create facade service" toReformat="true" toShortenFQNames="true">
    <variable name="Name" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="dashLowerName" expression="lowercaseAndDash(Name)" defaultValue="" alwaysStopAt="false" />
    <variable name="Type" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
      <option name="JS_TOP_LEVEL_STATEMENT" value="true" />
      <option name="TS_STATEMENT" value="true" />
      <option name="TS_TOP_LEVEL_STATEMENT" value="true" />
    </context>
  </template>
  <template name="a-html-list-crudable" value="&lt;div class=&quot;container flex margin-v align-center&quot;&gt;&#10;  &lt;div class=&quot;h4&quot;&gt;$title$&#10;  &lt;/div&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;ng-container *ngIf=&quot;selectableItems$ | async as listViewItems&quot;&gt;&#10;  &lt;div class=&quot;container flex margin-v align-center&quot;&gt;&#10;    &lt;div class=&quot;item&quot; style=&quot;min-width: 40%&quot;&gt;&#10;      &lt;ui-list-view [listViewItems]=&quot;listViewItems&quot; [selectable]=&quot;true&quot; [activateable]=&quot;true&quot; [viewDirection]=&quot;'row'&quot;&#10;                    (selected)=&quot;select($event)&quot; (toggleActive)=&quot;updateStatus($event[0], $event[1])&quot;&gt;&lt;/ui-list-view&gt;&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;&lt;/ng-container&gt;&#10;&#10;&lt;ng-container *ngIf=&quot;showForm$ | async as showForm&quot;&gt;&#10;&#10;  &lt;div style=&quot;margin-left: 2px; width: 41%&quot; class=&quot;container margin-v&quot; *ngIf=&quot;showForm.display&quot;&gt;&#10;    &lt;ui-form-dynamic-form [controls]=&quot;controls&quot; [value]=&quot;showForm.selected&quot;  (cancelled)=&quot;close()&quot;&#10;                          (submitted)=&quot;create($event)&quot;&gt;&lt;/ui-form-dynamic-form&gt;&#10;  &lt;/div&gt;&#10;&#10;&lt;/ng-container&gt;" description="create crudable list template" toReformat="true" toShortenFQNames="true">
    <variable name="title" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="true" />
    </context>
  </template>
  <template name="a-html-list-activateable" value="&lt;div class=&quot;container margin-v flex align-center&quot;&gt;&#10;  &lt;div class=&quot;h3&quot;&gt;$title$&#10;  &lt;/div&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;ng-container *ngIf=&quot;items$ | async as listViewItems&quot;&gt;&#10;  &lt;div class=&quot;container flex margin-v align-center&quot;&gt;&#10;    &lt;div class=&quot;item&quot; style=&quot;width: 40%&quot;&gt;&#10;      &lt;ui-list-view [listViewItems]=&quot;listViewItems&quot; [activateable]=&quot;true&quot; [viewDirection]=&quot;'column'&quot;&#10;                    (toggleActive)=&quot;updateStatus($event[0], $event[1])&quot;&gt;&lt;/ui-list-view&gt;&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;&lt;/ng-container&gt;" description="create activateable list template" toReformat="true" toShortenFQNames="true">
    <variable name="title" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="true" />
    </context>
  </template>
  <template name="a-form-controls" value="controls: ControlBase&lt;$NAME$&gt; [] = [&#10;    new TextBoxControl&lt;$NAME$&gt;({&#10;      key: 'nameGeo',&#10;      label: 'სახელი',&#10;      value: '',&#10;      required: true,&#10;      order: 1&#10;    })&#10;  ];" toReformat="true" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_CLASS" value="true" />
      <option name="TS_CLASS" value="true" />
    </context>
  </template>
</templateSet>